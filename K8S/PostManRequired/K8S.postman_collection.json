{
	"info": {
		"_postman_id": "5b821da3-3578-4c0f-ba07-3bc1f8e6f7b2",
		"name": "K8S",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6590545"
	},
	"item": [
		{
			"name": "Platform Service(Node Port)",
			"item": [
				{
					"name": "Get All Platforms",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{http_kubernetes_base}}/platforms/",
							"host": [
								"{{http_kubernetes_base}}"
							],
							"path": [
								"platforms",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Platform",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \r\n        \"name\": \"Docker\",\r\n        \"publisher\": \"Docker\",\r\n        \"cost\": \"Free\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{http_kubernetes_base}}/platforms/",
							"host": [
								"{{http_kubernetes_base}}"
							],
							"path": [
								"platforms",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Platform Service(Nginx)",
			"item": [
				{
					"name": "Get All Platforms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is text/xml\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/xml\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is null\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"    ",
									"    pm.expect(responseData).to.be.null;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response is not cached\", function () {",
									"    pm.expect(pm.response).to.not.have.header('Cache-Control');",
									"    pm.expect(pm.response).to.not.have.header('Expires');",
									"    pm.expect(pm.response).to.not.have.header('Last-Modified');",
									"    pm.expect(pm.response).to.not.have.header('ETag');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://acme.com/api/platforms/",
							"protocol": "http",
							"host": [
								"acme",
								"com"
							],
							"path": [
								"api",
								"platforms",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Platform",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \r\n        \"name\": \"Consul9\",\r\n        \"publisher\": \"Hashicrop9\",\r\n        \"cost\": \"Free\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://acme.com/api/platforms/",
							"protocol": "http",
							"host": [
								"acme",
								"com"
							],
							"path": [
								"api",
								"platforms",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Command Service(Nginx)",
			"item": [
				{
					"name": "Get All Platforms",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://acme.com/api/cmd/platforms/",
							"protocol": "http",
							"host": [
								"acme",
								"com"
							],
							"path": [
								"api",
								"cmd",
								"platforms",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Command For Platform Copy",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"HowTo\" : \"Push a docker container to hub\",\r\n    \"CommandLine\": \"docker push <name of container>\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://acme.com/api/cmd/platforms/1/commands",
							"protocol": "http",
							"host": [
								"acme",
								"com"
							],
							"path": [
								"api",
								"cmd",
								"platforms",
								"1",
								"commands"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Commands For Platform Copy",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://acme.com/api/cmd/platforms/4/commands/1",
							"protocol": "http",
							"host": [
								"acme",
								"com"
							],
							"path": [
								"api",
								"cmd",
								"platforms",
								"4",
								"commands",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}